
version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "29092:29092"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:29092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres2:
    build: ./postgres
    container_name: postgres2
    command: postgres -c wal_level=logical
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: cdc_db
    ports:
      - "5433:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d cdc_db"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.2
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  connect:
    build: ./connect
    container_name: connect
    depends_on:
      - kafka
      - postgres2
      - redis
      - elasticsearch
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
    ports:
      - "8083:8083"
    volumes:
      - ./register-postgres.json:/tmp/register-postgres.json
      - ./register-elasticsearch.json:/tmp/register-elasticsearch.json

  

  connector-setup:
    image: curlimages/curl:7.79.1
    container_name: connector-setup
    depends_on:
      - connect
    command: >
      sh -c "
        echo 'Waiting for Kafka Connect to start...';
        while [ $(curl -s -o /dev/null -w '''%{http_code}''' http://connect:8083/connectors) -ne 200 ]; do
          echo -n '.';
          sleep 5;
        done;
        echo 'Kafka Connect is up!';
        curl -X POST -H 'Content-Type: application/json' --data @/tmp/register-postgres.json http://connect:8083/connectors;
        curl -X POST -H 'Content-Type: application/json' --data @/tmp/register-elasticsearch.json http://connect:8083/connectors;
      "
    volumes:
      - ./register-postgres.json:/tmp/register-postgres.json
      - ./register-elasticsearch.json:/tmp/register-elasticsearch.json

  consumer:
    build: ./consumer
    container_name: consumer
    command: ["/bin/sh", "-c", "sleep 60; python main.py"]
    depends_on:
      - kafka
      - redis
      - elasticsearch
    environment:
      KAFKA_BROKER: kafka:9092
      ELASTICSEARCH_HOST: elasticsearch
      REDIS_HOST: redis

  api:
    build: ./api
    container_name: api
    depends_on:
      - redis
      - elasticsearch
    environment:
      ELASTICSEARCH_HOST: elasticsearch
      REDIS_HOST: redis
    ports:
      - "8001:8000"
      - "8002:8000"
